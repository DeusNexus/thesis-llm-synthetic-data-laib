{
    "content": "### Synthetic Data Generation\n\nGiven the statistics and patterns in the example data points, we'll generate a set of synthetic data points for laser-accelerated ion beams.\n\n### Initial Data Points Generation:\n```python\nimport random\n\ndef generate_data():\n    materials = ['aluminium', 'gold', 'plastic', 'polypropylene', 'polystyrene']\n    data = []\n\n    for _ in range(25):\n        target_material = random.choice(materials)\n        target_thickness = max(0, random.gauss(1.02, 4.11))  # Gaussian with mean 1.02 and sqrt(variance) for std dev\n        pulse_width = max(24, random.gauss(291, 1014.95))  # Gaussian with mean 291 and sqrt(1030000) for std dev\n        energy = max(0.302, random.gauss(13.9, 48.47))  # Gaussian with mean 13.9 and sqrt(2350) for std dev\n        spot_size = max(2.13, random.gauss(3.61, 3.7))  # Gaussian with mean 3.61 and sqrt(13.7) for std dev\n        intensity = max(1.05e18, random.gauss(5.10e20, 6.295e20))  # Gaussian with mean 5.10e20 and sqrt(3.96e41) for std dev\n        power = max(1.76e11, random.gauss(6.23e13, 2.01e14))  # Gaussian with mean 6.23e13 and sqrt(4.03e27) for std dev\n        cutoff_energy = max(3.3, random.gauss(8.64, 12.49))  # Gaussian with mean 8.64 and sqrt(156) for std dev\n\n        data.append([\n            target_material,\n            round(target_thickness, 3),\n            round(pulse_width, 0),\n            round(energy, 3),\n            round(spot_size, 3),\n            format(intensity, '.3e'),\n            round(power),\n            round(cutoff_energy, 1)\n        ])\n\n    return data\n\ninitial_data = generate_data()\nfor data_point in initial_data:\n  print(data_point)\n\n```\n\n### Recursive Criticism and Improvement:\n1. **Observation**: Energy values are higher than typical ranges in the example data. The Gaussian distribution with a high mean and std dev causes this outlier.\n2. **Improvement**: Use a log-normal distribution for energy to better capture the skewed distribution.\n3. **Observation**: While spot size has fixed values in examples (primarily 3.3), the synthetic data randomly spreads.\n4. **Improvement**: Use fixed spot size value of 3.3 for now.\n\nLet's apply these improvements:\n\n```python\nimport numpy as np\n\ndef generate_improved_data():\n    materials = ['aluminium', 'gold', 'plastic', 'polypropylene', 'polystyrene']\n    data = []\n\n    for _ in range(25):\n        target_material = random.choice(materials)\n        target_thickness = max(0, np.random.lognormal(mean=np.log(1.02), sigma=0.2))  # Log-normal for skewed distribution\n        pulse_width = max(24, np.random.lognormal(mean=np.log(291), sigma=1.1))  # Log-normal considering wide range\n        energy = max(0.302, np.random.lognormal(mean=np.log(5), sigma=2.5))  # Log-normal distribution for skewed data\n        spot_size = 3.3  # Fixed value based on observations\n        intensity = max(1.05e18, np.random.lognormal(mean=np.log(5.10e20), sigma=2.0))  # Log-normal for skewed distribution\n        power = max(1.76e11, np.random.lognormal(mean=np.log(6.23e13), sigma=1.6))  # Log-normal for wide-range distribution\n        cutoff_energy = max(3.3, np.random.lognormal(mean=np.log(8.64), sigma=0.4))  # Log-normal considering range\n\n        data.append([\n            target_material,\n            round(target_thickness, 3),\n            round(pulse_width, 0),\n            round(energy, 3),\n            round(spot_size, 3),\n            format(intensity, '.3e'),\n            round(power),\n            round(cutoff_energy, 1)\n        ])\n\n    return data\n\nimproved_data = generate_improved_data()\nfor data_point in improved_data:\n  print(data_point)\n\n```\n\n### Final Array of 25 Samples:\n```python\nfinal_data = [\n    ['polypropylene', 0.691, 74, 20.638, 3.3, '1.157e+21', 204061558644, 8.3],\n    ['plastic', 0.367, 100, 5.000, 3.3, '8.463e+20', 480042711429, 3.9],\n    ['polystyrene', 0.658, 67, 3.529, 3.3, '1.211e+21', 18027314966, 11.0],\n    ['plastic', 0.569, 501, 0.716, 3.3, '6.790e+20', 117052440294, 10.2],\n    ['polypropylene', 1.569, 54, 5.000, 3.3, '5.380e+21', 340747274457, 4.8],\n    ['gold', 0.628, 49, 0.562, 3.3, '4.395e+20', 71616700052, 6.1],\n    ['aluminium', 0.563, 437, 10.620, 3.3, '5.319e+20', 93526656757, 8.4],\n    ['plastic', 1.926, 45, 23.955, 3.3, '9.084e+20', 981457036740, 4.5],\n    ['gold', 0.219, 42, 3.668, 3.3, '1.028e+21', 55535670334, 9.8],\n    ['gold', 0.543, 40, 42.820, 3.3, '4.933e+20', 789059745634, 8.3],\n    ['plastic', 0.792, 426, 0.606, 3.3, '1.480e+21', 87626696480, 9.0],\n    ['plastic', 0.411, 81, 21.462, 3.3, '8.960e+20', 462754048923, 5.6],\n    ['plastic', 2.553, 50, 2.890, 3.3, '6.394e+20', 6260069945, 4.0],\n    ['aluminium', 0.417, 253, 32.076, 3.3, '5.267e+20', 625006194201, 6.8],\n    ['polypropylene', 0.362, 295, 1.614, 3.3, '1.248e+21', 32513844667, 8.4],\n    ['plastic', 0.563, 157, 8.663, 3.3, '5.767e+20', 138237774452, 7.1],\n    ['polypropylene', 0.691, 54, 0.408, 3.3, '5.380e+20', 217268759846, 3.3],\n    ['aluminium', 2.416, 47, 2.891, 3.3, '5.409e+20', 170580238633, 12.8],\n    ['plastic', 1.594, 32, 4.897, 3.3, '9.448e+20', 71639802877, 8.9],\n    ['gold', 1.046, 35, 56.730, 3.3, '7.136e+20', 968148199810, 14.4],\n    ['plastic', 1.117, 49, 5.108, 3.3, '1.031e+21', 192451347718, 4.7],\n    ['polystyrene', 0.375, 57, 0.754, 3.3, '2.948e+21', 62512314818, 11.4],\n    ['gold', 2.426, 57, 5.000, 3.3, '8.864e+20', 148830333266, 4.7],\n    ['plastic', 0.299, 47, 10.889, 3.3, '5.111e+20', 55493830547, 10.2],\n    ['aluminium', 1.219, 42, 1.807, 3.3, '7.695e+20', 51273952911, 5.7]\n]\n\nfor sample in final_data:\n    print(sample)\n```",
    "api_obj": {
        "id": "chatcmpl-9YtGbQZVONBhDKLIf6k3wxBATJ3vD",
        "choices": [
            {
                "finish_reason": "stop",
                "index": 0,
                "logprobs": null,
                "message": {
                    "content": "### Synthetic Data Generation\n\nGiven the statistics and patterns in the example data points, we'll generate a set of synthetic data points for laser-accelerated ion beams.\n\n### Initial Data Points Generation:\n```python\nimport random\n\ndef generate_data():\n    materials = ['aluminium', 'gold', 'plastic', 'polypropylene', 'polystyrene']\n    data = []\n\n    for _ in range(25):\n        target_material = random.choice(materials)\n        target_thickness = max(0, random.gauss(1.02, 4.11))  # Gaussian with mean 1.02 and sqrt(variance) for std dev\n        pulse_width = max(24, random.gauss(291, 1014.95))  # Gaussian with mean 291 and sqrt(1030000) for std dev\n        energy = max(0.302, random.gauss(13.9, 48.47))  # Gaussian with mean 13.9 and sqrt(2350) for std dev\n        spot_size = max(2.13, random.gauss(3.61, 3.7))  # Gaussian with mean 3.61 and sqrt(13.7) for std dev\n        intensity = max(1.05e18, random.gauss(5.10e20, 6.295e20))  # Gaussian with mean 5.10e20 and sqrt(3.96e41) for std dev\n        power = max(1.76e11, random.gauss(6.23e13, 2.01e14))  # Gaussian with mean 6.23e13 and sqrt(4.03e27) for std dev\n        cutoff_energy = max(3.3, random.gauss(8.64, 12.49))  # Gaussian with mean 8.64 and sqrt(156) for std dev\n\n        data.append([\n            target_material,\n            round(target_thickness, 3),\n            round(pulse_width, 0),\n            round(energy, 3),\n            round(spot_size, 3),\n            format(intensity, '.3e'),\n            round(power),\n            round(cutoff_energy, 1)\n        ])\n\n    return data\n\ninitial_data = generate_data()\nfor data_point in initial_data:\n  print(data_point)\n\n```\n\n### Recursive Criticism and Improvement:\n1. **Observation**: Energy values are higher than typical ranges in the example data. The Gaussian distribution with a high mean and std dev causes this outlier.\n2. **Improvement**: Use a log-normal distribution for energy to better capture the skewed distribution.\n3. **Observation**: While spot size has fixed values in examples (primarily 3.3), the synthetic data randomly spreads.\n4. **Improvement**: Use fixed spot size value of 3.3 for now.\n\nLet's apply these improvements:\n\n```python\nimport numpy as np\n\ndef generate_improved_data():\n    materials = ['aluminium', 'gold', 'plastic', 'polypropylene', 'polystyrene']\n    data = []\n\n    for _ in range(25):\n        target_material = random.choice(materials)\n        target_thickness = max(0, np.random.lognormal(mean=np.log(1.02), sigma=0.2))  # Log-normal for skewed distribution\n        pulse_width = max(24, np.random.lognormal(mean=np.log(291), sigma=1.1))  # Log-normal considering wide range\n        energy = max(0.302, np.random.lognormal(mean=np.log(5), sigma=2.5))  # Log-normal distribution for skewed data\n        spot_size = 3.3  # Fixed value based on observations\n        intensity = max(1.05e18, np.random.lognormal(mean=np.log(5.10e20), sigma=2.0))  # Log-normal for skewed distribution\n        power = max(1.76e11, np.random.lognormal(mean=np.log(6.23e13), sigma=1.6))  # Log-normal for wide-range distribution\n        cutoff_energy = max(3.3, np.random.lognormal(mean=np.log(8.64), sigma=0.4))  # Log-normal considering range\n\n        data.append([\n            target_material,\n            round(target_thickness, 3),\n            round(pulse_width, 0),\n            round(energy, 3),\n            round(spot_size, 3),\n            format(intensity, '.3e'),\n            round(power),\n            round(cutoff_energy, 1)\n        ])\n\n    return data\n\nimproved_data = generate_improved_data()\nfor data_point in improved_data:\n  print(data_point)\n\n```\n\n### Final Array of 25 Samples:\n```python\nfinal_data = [\n    ['polypropylene', 0.691, 74, 20.638, 3.3, '1.157e+21', 204061558644, 8.3],\n    ['plastic', 0.367, 100, 5.000, 3.3, '8.463e+20', 480042711429, 3.9],\n    ['polystyrene', 0.658, 67, 3.529, 3.3, '1.211e+21', 18027314966, 11.0],\n    ['plastic', 0.569, 501, 0.716, 3.3, '6.790e+20', 117052440294, 10.2],\n    ['polypropylene', 1.569, 54, 5.000, 3.3, '5.380e+21', 340747274457, 4.8],\n    ['gold', 0.628, 49, 0.562, 3.3, '4.395e+20', 71616700052, 6.1],\n    ['aluminium', 0.563, 437, 10.620, 3.3, '5.319e+20', 93526656757, 8.4],\n    ['plastic', 1.926, 45, 23.955, 3.3, '9.084e+20', 981457036740, 4.5],\n    ['gold', 0.219, 42, 3.668, 3.3, '1.028e+21', 55535670334, 9.8],\n    ['gold', 0.543, 40, 42.820, 3.3, '4.933e+20', 789059745634, 8.3],\n    ['plastic', 0.792, 426, 0.606, 3.3, '1.480e+21', 87626696480, 9.0],\n    ['plastic', 0.411, 81, 21.462, 3.3, '8.960e+20', 462754048923, 5.6],\n    ['plastic', 2.553, 50, 2.890, 3.3, '6.394e+20', 6260069945, 4.0],\n    ['aluminium', 0.417, 253, 32.076, 3.3, '5.267e+20', 625006194201, 6.8],\n    ['polypropylene', 0.362, 295, 1.614, 3.3, '1.248e+21', 32513844667, 8.4],\n    ['plastic', 0.563, 157, 8.663, 3.3, '5.767e+20', 138237774452, 7.1],\n    ['polypropylene', 0.691, 54, 0.408, 3.3, '5.380e+20', 217268759846, 3.3],\n    ['aluminium', 2.416, 47, 2.891, 3.3, '5.409e+20', 170580238633, 12.8],\n    ['plastic', 1.594, 32, 4.897, 3.3, '9.448e+20', 71639802877, 8.9],\n    ['gold', 1.046, 35, 56.730, 3.3, '7.136e+20', 968148199810, 14.4],\n    ['plastic', 1.117, 49, 5.108, 3.3, '1.031e+21', 192451347718, 4.7],\n    ['polystyrene', 0.375, 57, 0.754, 3.3, '2.948e+21', 62512314818, 11.4],\n    ['gold', 2.426, 57, 5.000, 3.3, '8.864e+20', 148830333266, 4.7],\n    ['plastic', 0.299, 47, 10.889, 3.3, '5.111e+20', 55493830547, 10.2],\n    ['aluminium', 1.219, 42, 1.807, 3.3, '7.695e+20', 51273952911, 5.7]\n]\n\nfor sample in final_data:\n    print(sample)\n```",
                    "role": "assistant",
                    "function_call": null,
                    "tool_calls": null
                }
            }
        ],
        "created": 1718102625,
        "model": "gpt-4o-2024-05-13",
        "object": "chat.completion",
        "system_fingerprint": "fp_319be4768e",
        "usage": {
            "completion_tokens": 2055,
            "prompt_tokens": 3357,
            "total_tokens": 5412
        }
    },
    "inputs": [
        {
            "role": "system",
            "content": "Generate synthetic data for laser-accelerated ion beams and improve it through recursive criticism. The features are target_material, target_thickness, pulse_width, energy, spot_size, intensity, power, and cutoff_energy. Note that the data is not normally distributed. Here are key univariate statistics for each feature followed by some example data points:\n\nExamples:"
        },
        {
            "role": "user",
            "content": "### Statistics\n### Univariate Statistics\nThe dataset consists of several numeric features, each described by key univariate statistics including mean, median, variance, the 10th (Q10) and 90th (Q90) percentiles, minimum, and maximum values. Below are the calculated statistics for each feature:\n\n- Target Thickness\n  - Mean: 1.02\n  - Median: 0.593\n  - Variance: 16.9\n  - 10th Percentile (Q10): 0.273\n  - 25th Percentile (Q25): 0.482\n  - 75th Percentile (Q75): 0.769\n  - 90th Percentile (Q90): 1.0\n  - Min: 0\n  - Max: 125\n\n- Pulse Width\n  - Mean: 291\n  - Median: 30\n  - Variance: 1,030,000\n  - 10th Percentile (Q10): 30\n  - 25th Percentile (Q25): 30\n  - 75th Percentile (Q75): 279\n  - 90th Percentile (Q90): 475\n  - Min: 24\n  - Max: 12,900\n\n- Energy\n  - Mean: 13.9\n  - Median: 2.35\n  - Variance: 2,350\n  - 10th Percentile (Q10): 1.55\n  - 25th Percentile (Q25): 2.31\n  - 75th Percentile (Q75): 2.41\n  - 90th Percentile (Q90): 10\n  - Min: 0.302\n  - Max: 1,000\n\n- Spot Size\n  - Mean: 3.61\n  - Median: 3.3\n  - Variance: 13.7\n  - 10th Percentile (Q10): 3.3\n  - 25th Percentile (Q25): 3.3\n  - 75th Percentile (Q75): 3.3\n  - 90th Percentile (Q90): 3.3\n  - Min: 2.13\n  - Max: 60\n\n- Intensity\n  - Mean: 5.10e20\n  - Median: 6.22e20\n  - Variance: 3.96e41\n  - 10th Percentile (Q10): 4.53e19\n  - 25th Percentile (Q25): 6.83e19\n  - 75th Percentile (Q75): 6.44e20\n  - 90th Percentile (Q90): 6.59e20\n  - Min: 1.05e18\n  - Max: 5.59e21\n\n- Power\n  - Mean: 6.23e13\n  - Median: 7.68e13\n  - Variance: 4.03e27\n  - 10th Percentile (Q10): 5.59e12\n  - 25th Percentile (Q25): 8.45e12\n  - 75th Percentile (Q75): 7.94e13\n  - 90th Percentile (Q90): 8.14e13\n  - Min: 1.76e11\n  - Max: 3.83e14\n\n- Cutoff Energy\n  - Mean: 8.64\n  - Median: 4.8\n  - Variance: 156\n  - 10th Percentile (Q10): 4.0\n  - 25th Percentile (Q25): 4.4\n  - 75th Percentile (Q75): 6.2\n  - 90th Percentile (Q90): 11.7\n  - Min: 3.3\n  - Max: 95\n\n### Bivariate Statistics\nBelow are the calculated bivariate statistics for pairs of features:\n\n#### Target Thickness and Energy\n- Pearson Correlation: 0.250\n- Spearman Correlation: 0.391\n- Covariance: 4.98e1\n\n#### Pulse Width and Energy\n- Pearson Correlation: 0.343\n- Spearman Correlation: 0.150\n- Covariance: 1.69e4\n\n#### Spot Size and Energy\n- Pearson Correlation: 0.646\n- Spearman Correlation: -0.00389\n- Covariance: 1.16e2\n\n#### Intensity and Energy\n- Pearson Correlation: 0.397\n- Spearman Correlation: 0.567\n- Covariance: 1.21e22\n\n#### Power and Energy\n- Pearson Correlation: 0.584\n- Spearman Correlation: 0.609\n- Covariance: 1.80e15\n\n#### Cutoff Energy and Energy\n- Pearson Correlation: 0.672\n- Spearman Correlation: 0.563\n- Covariance: 4.07e2\n\n\n### Example Data Points\n[\"aluminium\", 5.0, 1500, 250.0, 60.0, 4.088E+18, 166700000000000, 13.0]\n[\"gold\", 1.1, 500, 54.27, 2.127, 2.118E+21, 108500000000000, 30.0]\n[\"gold\", 4.0, 475, 7.128, 2.661, 1.872E+20, 15010000000000, 12.0]\n[\"plastic\", 0.615, 279, 1.577, 3.3, 4.584E+19, 5654000000000, 4.5]\n[\"plastic\", 0.765, 30, 2.419, 3.3, 6.538E+20, 80640000000000, 6.8]\n[\"plastic\", 0.522, 30, 1.583, 3.3, 4.278E+20, 52760000000000, 4.5]\n[\"plastic\", 0.491, 30, 1.528, 3.3, 4.131E+20, 50950000000000, 4.5]\n[\"plastic\", 0.547, 80, 1.534, 3.3, 1.555E+20, 19170000000000, 4.5]\n[\"plastic\", 0.915, 279, 2.361, 3.3, 6.861E+19, 8461000000000, 4.8]\n[\"plastic\", 0.716, 279, 1.556, 3.3, 4.522E+19, 5577000000000, 6.0]\n[\"plastic\", 0.28, 30, 2.291, 3.3, 6.192E+20, 76370000000000, 5.5]\n[\"plastic\", 0.544, 30, 2.396, 3.3, 6.474E+20, 79850000000000, 5.5]\n[\"plastic\", 0.389, 463, 2.405, 3.3, 4.212E+19, 5194000000000, 3.8]\n[\"plastic\", 0.657, 30, 2.316, 3.3, 6.258E+20, 77180000000000, 5.5]\n[\"plastic\", 0.274, 30, 1.529, 3.3, 4.132E+20, 50960000000000, 4.8]\n[\"plastic\", 0.682, 187, 2.398, 3.3, 1.040E+20, 12820000000000, 4.3]\n[\"plastic\", 0.288, 30, 2.303, 3.3, 6.225E+20, 76770000000000, 3.8]\n[\"plastic\", 0.128, 30, 2.29, 3.3, 6.191E+20, 76350000000000, 4.5]\n[\"plastic\", 0.563, 30, 2.345, 3.3, 6.338E+20, 78170000000000, 3.8]\n[\"plastic\", 0.626, 30, 2.385, 3.3, 6.445E+20, 79480000000000, 4.4]\n[\"plastic\", 0.826, 30, 2.382, 3.3, 6.439E+20, 79410000000000, 6.8]\n[\"plastic\", 0.535, 463, 2.433, 3.3, 4.261E+19, 5256000000000, 4.8]\n[\"plastic\", 0.509, 463, 2.365, 3.3, 4.141E+19, 5107000000000, 3.8]\n[\"plastic\", 0.599, 30, 2.305, 3.3, 6.229E+20, 76830000000000, 8.0]\n[\"plastic\", 0.611, 279, 1.569, 3.3, 4.559E+19, 5622000000000, 4.0]\n[\"plastic\", 0.702, 30, 2.412, 3.3, 6.519E+20, 80400000000000, 6.8]\n[\"plastic\", 1.011, 279, 2.339, 3.3, 6.799E+19, 8385000000000, 5.5]\n[\"plastic\", 0.756, 187, 2.328, 3.3, 1.010E+20, 12450000000000, 3.8]\n[\"plastic\", 0.263, 30, 2.33, 3.3, 6.297E+20, 77660000000000, 3.8]\n[\"plastic\", 0.494, 30, 2.369, 3.3, 6.402E+20, 78960000000000, 4.5]\n[\"plastic\", 0.578, 30, 2.306, 3.3, 6.232E+20, 76860000000000, 6.8]\n[\"plastic\", 0.769, 30, 2.383, 3.3, 6.440E+20, 79430000000000, 6.2]\n[\"plastic\", 0.94, 279, 2.349, 3.3, 6.825E+19, 8418000000000, 5.5]\n[\"plastic\", 0.27, 30, 2.331, 3.3, 6.301E+20, 77710000000000, 4.5]\n[\"plastic\", 0.968, 30, 2.39, 3.3, 6.460E+20, 79670000000000, 6.2]\n[\"plastic\", 0.56, 30, 2.371, 3.3, 6.408E+20, 79030000000000, 5.4]\n[\"plastic\", 0.749, 279, 2.365, 3.3, 6.873E+19, 8477000000000, 4.5]\n[\"plastic\", 0.684, 279, 2.34, 3.3, 6.800E+19, 8386000000000, 4.4]\n[\"plastic\", 0.779, 279, 2.329, 3.3, 6.767E+19, 8346000000000, 4.8]\n[\"plastic\", 0.735, 30, 2.392, 3.3, 6.464E+20, 79720000000000, 4.5]\n[\"plastic\", 0.67, 279, 2.383, 3.3, 6.926E+19, 8542000000000, 4.8]\n[\"plastic\", 0.853, 279, 2.309, 3.3, 6.711E+19, 8277000000000, 5.5]\n[\"plastic\", 1.012, 30, 2.384, 3.3, 6.443E+20, 79470000000000, 3.7]\n[\"plastic\", 0.723, 30, 2.326, 3.3, 6.286E+20, 77520000000000, 4.8]\n[\"plastic\", 0.764, 30, 2.424, 3.3, 6.552E+20, 80810000000000, 4.8]\n[\"plastic\", 0.569, 30, 2.346, 3.3, 6.340E+20, 78200000000000, 4.3]\n[\"plastic\", 0.269, 30, 1.513, 3.3, 4.089E+20, 50430000000000, 4.8]\n[\"polypropylene\", 0.8, 500, 146.61, 4.406, 1.334E+21, 293200000000000, 54.5]\n[\"polystyrene\", 0.3, 500, 174.96, 3.103, 3.210E+21, 349900000000000, 70.0]\n[\"plastic\", 0.57, 30, 2.409, 3.3, 6.511E+20, 80300000000000, 4.3]\n\nFirst, generate a set of data points. Critically evaluate them and identify improvements. Apply the improvements and generate revised data points. Repeat this process for refined results until you have 25 new data points. The final output should be a complete array of 25 samples, each with the following features: target_material, target_thickness, pulse_width, energy, spot_size, intensity, power, and cutoff_energy. Explicitly show all of the 25 generated samples inside an array."
        }
    ],
    "metadata_gen": {
        "N": 15,
        "MODEL": "gpt-4o",
        "ORG_FOLDER": "d_clean_remove_small_samples_ipr",
        "ORG_SAMPLE_FILE": "rs_size_50",
        "PROMPT_METHOD": "recursive_criticism_and_improvement",
        "PROMPT_TEMPLATE": "1prompt_templates_system_stats.json",
        "STATS": "d_clean_remove_small_samples_stats"
    }
}